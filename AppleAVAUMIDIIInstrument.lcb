library org.openxtalk.appleavaumidiinstrument

use com.livecode.engine
use com.livecode.foreign
use com.livecode.objc
use com.livecode.array
use com.livecode.list
use com.livecode.byte
use com.livecode.date
use com.livecode.binary
use com.livecode.bitwise
use com.livecode.math
use com.livecode.string

metadata version is "0.1"
metadata author is "Paul McClernan"
metadata title is "Apple AVAudioUnitMIDIInstrument library"
metadata svgicon is "M66.43,52.07c-0.71,0.32-1.48,0.56-2.31,0.78c-2.35,0.65-5.44,0.04-5.44,0.04l-8.52,9.56c0,0,11.03,11.58,13.36,13.92 s4.02,6.19,4.02,6.19l8.77-19.76C76.31,62.8,67.18,58.92,66.43,52.07z M56.35,86.86c-2.83-2.4-16.4-15.09-16.4-15.09L21.22,90.12c0,0,3.25,1.93,5.41,1.86c5.6-0.17,10.48-3.77,15.46-3.77 c4.58,0,8.99,3.52,15.56,3.77c1.55,0.06,2.88-0.35,4.41-1.24c0.7-0.41,2.02-1.54,2.02-1.54S59.18,89.26,56.35,86.86z M52.45,18.42c5.85-5.85,5.42-15.63,5.42-15.63s-8.65,0.97-13.34,6.82c-5.22,6.51-5.07,13.39-4.94,14.51 C44.49,24.13,48.71,22.16,52.45,18.42z M18.38,48.03c-3.59,0.27-3.23,4.28-3.21,4.45l0.03,0.32l-0.23,0.23l-5.54,5.89l-5.85-5.95l8.91,24.95l18.58-18.16l-8.8-9.83 C22.28,49.93,19.79,47.92,18.38,48.03z M9.98,39.65c0,0,1.4-2.6,5.19-5.27c2.15-1.51,4.69-2.88,7.45-3.52c1.75-0.41,3.72-0.62,5.86-0.62 c3.63,0,9.12,1.35,9.12,1.35l-10.85,4.24c-1.77,0.8-2.58,2.62-2.85,3.38l14.4,13.75c3.71-3.62,6.78-6.15,9.99-9.57 c-0.51-4.23,0.89-8.11,3.22-10.81c4.73-5.48,13.47-2.78,13.47-2.78l-3.55,3.05c0,0-4.13,3.16-3.01,6.79 c0.27,0.87,0.84,2.34,2.44,3.17c0.93,0.48,4.09,0.37,5.6-0.95C68.48,40.1,70.45,38,70.45,38s0.88-1.54,1.8-2.43 c1.11-1.08,3.56-2.91,3.56-2.91s-4.82-5.38-8.14-6.83c-2.91-1.27-6.15-1.89-9.71-1.91c-7.4-0.03-12.83,4.65-16.7,4.35 c-3.19-0.25-9.47-4.38-14.6-4.35c-7.22,0.05-13.04,2.44-17.47,7.33C5.44,35.37,4,45.11,4,45.11l1.89-1.93c0,0,2.98-0.11,3.34-0.41 c1.48-1.24,1.31-2.33,1.31-2.33L9.98,39.65z M18.15,46.11c1.68-0.19,4.88,2.09,4.88,2.09l9.22,10.03l4.11-3.86L21.75,39.42l0.13-0.52c0.03-0.14,0.88-3.49,3.9-4.84 l5.18-2.02c-1.95-0.07-5.6-0.11-7.97,0.42c-3.26,0.74-8.73,4.32-10.78,7.04c0.06,0.17,0.09,0.34,0.1,0.53 c0.08,1.49-1.41,3.45-2.02,3.98c-0.73,0.63-2.55,1.03-3.63,1.21l-3.94,3.94l6.59,6.6l3.85-3.86c-0.04-1.6,0.45-3.4,1.78-4.57 C15.67,46.71,16.48,46.3,18.15,46.11z M70.95,39.93c-0.62,0.44-4.18,6.07-9.58,4.98c-2.9-0.58-4.65-3.5-4.92-5.3c-0.6-4.07,1.8-6.16,3.56-7.69 c0.59-0.52,1.6-1.31,1.6-1.31s-6.16-0.73-9.16,3.5c-3.98,5.61-1.98,9.83-1.98,9.83S13.22,80.66,12.03,81.82 c-0.09,0.56-0.5,3.71,0.93,5.31c1.56,1.74,3.06,2.79,5.34,2.24c1.3-0.32,39.44-38.44,39.44-38.44s3.65,0.56,5.67,0.07 C68.3,49.8,70.71,46.32,70.95,39.93z M65.52,84.81c-0.14,0.85-0.52,1.48-1.2,1.99c-0.5,0.41-1.12,0.62-1.88,0.62c-2.8,0-6.23-3.51-6.24-3.52L41.82,70.25 l6.44-6.55c0,0,13.44,13.7,14.11,14.36C63.03,78.73,65.79,83.22,65.52,84.81z"
---------------------------------------------------------------------------------------------------------------------------
public foreign type AudioComponentDescriptionReturn binds to "MCAggregateTypeInfo:bbbbbbbbbbbbjj" -- 3x 4CharOSTypes & 2X UInt32s
public foreign type AudioComponentDescription binds to "MCAggregateTypeInfo:jjjjj" -- 5x OSType/UInt32s

constant kAudioUnitType_MusicDevice is 1635085685 -- 'umua' reversed for Intel, PowerPC would be 1970107745 -- "aumu"
constant kAudioUnitSubType_Sampler is 1935764848 -- 'pmas' reversed for Intel, PowerPC would be 1886216563 -- "samp"
constant kAudioUnitSubType_DLSSynth is  1684828960 -- ' sld' reversed for Intel, PowerPC would be 544435300 --"dls "
constant kAudioUnitSubType_MIDISynth is 1836284270 -- 'nysm' reversed for Intel, PowerPC would be 1853453165 --"msyn"
constant kAudioUnitManufacturer_Apple is 1634758764 -- 'lppa' reversed for Intel, PowerPC would be 1819308129 -- "appl"
constant kAudioUnitType_Output is 1635086197 -- "uoua" reversed for Intel, PowerPC would be 1970238817 -- "auou"
constant kAudioUnitSubType_RemoteIO is 1919512419 -- "coir" reversed for Intel, PowerPC would be 1668245874 -- "rioc"
constant kAUMIDISynthProperty_EnablePreload is 4119

---------------- AudioUnit Errors ------
constant kAudioUnitErr_InvalidProperty is -10879
constant kAudioUnitErr_InvalidParameter is -10878
constant kAudioUnitErr_InvalidElement is -10877
constant kAudioUnitErr_NoConnection is -10876
constant kAudioUnitErr_FailedInitialization is -10875
constant kAudioUnitErr_TooManyFramesToProcess is -10874
constant kAudioUnitErr_InvalidFile is -10871
constant kAudioUnitErr_FormatNotSupported is -10868
constant kAudioUnitErr_Uninitialized is -10867
constant kAudioUnitErr_InvalidScope is -10866
constant kAudioUnitErr_PropertyNotWritable is -10865
constant kAudioUnitErr_CannotDoInCurrentContext is -10863
constant kAudioUnitErr_InvalidPropertyValue is -10851
constant kAudioUnitErr_PropertyNotInUse is -10850
constant kAudioUnitErr_Initialized is -10849
constant kAudioUnitErr_InvalidOfflineRender is -10848
constant kAudioUnitErr_Unauthorized is -10847
handler CheckAudioUnitError(in pError as CSInt)
  if pError = kAudioUnitErr_InvalidProperty then
    log "kAudioUnitErr_InvalidProperty"
  else if pError = kAudioUnitErr_InvalidParameter then
    log "kAudioUnitErr_InvalidParameter"
  else if pError = kAudioUnitErr_InvalidElement then
    log "kAudioUnitErr_InvalidElement"
   else if pError = kAudioUnitErr_NoConnection then
     log "kAudioUnitErr_NoConnection"
   else if pError = kAudioUnitErr_FailedInitialization then
     log "kAudioUnitErr_FailedInitialization"
   else if pError = kAudioUnitErr_TooManyFramesToProcess then
     log "kAudioUnitErr_TooManyFramesToProcess"
   else if pError = kAudioUnitErr_InvalidFile then
     log "kAudioUnitErr_InvalidFile"
   else if pError = kAudioUnitErr_FormatNotSupported then
     log "kAudioUnitErr_FormatNotSupported"
   else if pError = kAudioUnitErr_Uninitialized then
     log "kAudioUnitErr_Uninitialized"
   else if pError = kAudioUnitErr_InvalidScope then
     log "kAudioUnitErr_InvalidScope"
   else if pError = kAudioUnitErr_PropertyNotWritable then
     log "kAudioUnitErr_PropertyNotWritable"
   else if pError = kAudioUnitErr_InvalidScope then
     log "kAudioUnitErr_InvalidScope"
   else if pError = kAudioUnitErr_CannotDoInCurrentContext then
     log "kAudioUnitErr_CannotDoInCurrentContext"
   else if pError = kAudioUnitErr_InvalidPropertyValue then
     log "kAudioUnitErr_InvalidPropertyValue"
   else if pError = kAudioUnitErr_PropertyNotInUse then
     log "kAudioUnitErr_PropertyNotInUse"
   else if pError = kAudioUnitErr_Initialized then
     log "kAudioUnitErr_Initialized"
   else if pError = kAudioUnitErr_InvalidOfflineRender then
     log "kAudioUnitErr_InvalidOfflineRender"
   else if pError = kAudioUnitErr_Unauthorized then
     log "kAudioUnitErr_Unauthorized"
  else if pError = 0 then
    log "No Error"
  else
    log "Error code not recognized"
  end if
end handler

public handler getIntegerFromFourCharCodeLittleEndian(in pStr as String) returns optional Uint32
   variable tUint32 as Uint32
   put (the code of char 4 of pStr) * 16777216 into tUint32 ---  256 * 256 * 256
   put tUint32 + ((the code of char 3 of pStr) * 65536 ) into tUint32 -- 256 * 256
   put tUint32 + ((the code of char 2 of pStr) * 256 ) into tUint32
   put tUint32 + (the code of char 1 of pStr) into tUint32
   return tUint32
end handler

public handler getIntegerFromFourCharCodeBigEndian(in pStr as String) returns optional Uint32
   variable tUint32 as Uint32
   put (the code of char 1 of pStr) * 16777216 into tUint32
   put tUint32 + ((the code of char 2 of pStr) * 65536 ) into tUint32
   put tUint32 + ((the code of char 3 of pStr) * 256 ) into tUint32
   put tUint32 + (the code of char 4 of pStr) into tUint32
   return tUint32
end handler

-- foreign handler MCDataGetBytePtr(in pData as Data) returns Pointer binds to "<builtin>"
public handler getFourCharCodeFromUint32( in pNum as optional any) returns optional String
   -- 1383023468 = appl
   variable tStr as String
   variable tTempStr as String
   variable tNum as Number
   variable tBinsStr as String
   -- log pNum
   if pNum is not nothing then
      if pNum is a number then
         put pNum formatted as string into pNum
      end if
      put pNum converted from base 10 to base 16 into tBinsStr
      if (the number of chars in tBinsStr) < 8 then
         put 8 - (the number of chars in tBinsStr) into tNum
         repeat tNum times
            put "0" before tBinsStr
         end repeat
         -- log tBinsStr
      end if
       put ( (char 1 to 2 of tBinsStr) converted from base 16 to base 10 ) into tTempStr
       put the char with code (tTempStr parsed as number) into tStr
       put ( (char 3 to 4 of tBinsStr) converted from base 16 to base 10 ) into tTempStr
       put the char with code (tTempStr parsed as number) after tStr
       put ( (char 5 to 6 of tBinsStr) converted from base 16 to base 10 ) into tTempStr
       put the char with code (tTempStr parsed as number) after tStr
       put ( (char 7 to 8 of tBinsStr) converted from base 16 to base 10 ) into tTempStr
       put the char with code (tTempStr parsed as number) after tStr
      return tStr
   else
      return the empty string
   end if
end handler

private foreign handler objC_NSURLURLWithString(in pURLString as ObjcId) returns ObjcId binds to "objc:NSURL.+URLWithString:"
private foreign handler objC_NSURLfileOrDirURLWithPath(in pPathString as ObjcId, in pIsDir as CBool) returns ObjcId binds to "objc:.NSURL.+fileURLWithPath:isDirectory:"
private foreign handler objC_NSURLfileURLWithPath(in pPathString as ObjcId) returns ObjcId binds to "objc:NSURL.+fileURLWithPath:"
private foreign handler objC_NSURLGetAbsoluteString(in pURLString as ObjcId) returns ObjcId binds to "objc:NSURL.absoluteString"
private foreign handler objC_NSURLGetPath(in pURLString as ObjcId) returns ObjcId binds to "objc:NSURL.path"

private foreign handler objC_NSMutableArrayAlloc() returns ObjcRetainedId binds to "objc:NSMutableArray.+alloc"
private foreign handler objC_NSMutableArrayInitWithCapacity(in pNSMutableArray as ObjcId, in pCapacity as NaturalFloat) returns ObjcId binds to "objc:NSMutableArray.-initWithCapacity:"
private foreign handler objC_NSMutableArrayInitWithNSArray(in pNSMutableArray as ObjcId, in pNSArray as ObjcId) returns ObjcId binds to "objc:NSMutableArray.-initWithArray:"

private foreign handler objC_NSErrorAlloc() returns ObjcId binds to "objc:NSError.+alloc"
private foreign handler c_CFErrorCopyDescription(in pCFErrorRef as ObjcId) returns ObjcId binds to "c:CFErrorCopyDescription"

private foreign handler objC_AVAudioEngineAlloc() returns ObjcRetainedId binds to "objc:AVAudioEngine.+alloc" -- must be ObjcRetainedId
private foreign handler objC_AVAudioEngineInit(in pAVAudioEngine as ObjcId) returns ObjcId binds to "objc:AVAudioEngine.-init"
private foreign handler objC_AVAudioEngineConnectSourceToDest(in pAVAudioEngine as ObjcId, in pSourceNode as ObjcId, in pDestinationNode as ObjcId, in pFormat as optional any) \
                                                               returns nothing binds to "objc:AVAudioEngine.-connect:to:format:"
private foreign handler objC_AVAudioEngineDisconnectInputNode(in pAVAudioEngine as ObjcId, in pSourceNode as ObjcId) returns nothing binds to "objc:AVAudioEngine.-disconnectNodeInput:"

private foreign handler objC_AVAudioEngineGetMainMixerNode(in pAVAudioEngine as ObjcId) returns ObjcId binds to "objc:AVAudioEngine.mainMixerNode"
private foreign handler objC_AVAudioEngineGetInputNode(in pAVAudioEngine as ObjcId) returns ObjcId binds to "objc:AVAudioEngine.inputNode"
private foreign handler objC_AVAudioEngineGetOutputNode(in pAVAudioEngine as ObjcId) returns ObjcId binds to "objc:AVAudioEngine.outputNode"

private foreign handler objC_AVAudioEngineAttachNode(in pAVAudioEngine as ObjcId, in pAVAudioNode as ObjcId) returns nothing binds to "objc:AVAudioEngine.-attachNode:"
private foreign handler objC_AVAudioEngineDetachNode(in pAVAudioEngine as ObjcId, in pAVAudioNode as ObjcId) returns nothing binds to "objc:AVAudioEngine.-detachNode:"

private foreign handler objC_AVAudioEnginePrepareToStart(in pAVAudioEngine as ObjcId) returns nothing binds to "objc:AVAudioEngine.-prepare"
private foreign handler objC_AVAudioEngineStart(in pAVAudioEngine as ObjcId, out rError as optional ObjcId) returns CBool binds to "objc:AVAudioEngine.-startAndReturnError:"
private foreign handler objC_AVAudioEngineReset(in pAVAudioEngine as ObjcId) returns nothing binds to "objc:AVAudioEngine.-reset"
private foreign handler objC_AVAudioEnginePause(in pAVAudioEngine as ObjcId) returns nothing binds to "objc:AVAudioEngine.-pause"
private foreign handler objC_AVAudioEngineStop(in pAVAudioEngine as ObjcId) returns nothing binds to "objc:AVAudioEngine.-stop"
private foreign handler objC_AVAudioEngineIsRunning(in pAVAudioEngine as ObjcId) returns CBool binds to "objc:AVAudioEngine.isRunning"

private foreign handler objC_AVAudioUnitMIDIInstrumentAlloc() returns ObjcRetainedId binds to "objc:AVAudioUnitMIDIInstrument.+alloc"
private foreign handler objC_AVAudioUnitMIDIInstrumentInitWithDescr(in pAVAUMIDIInstrInstr as ObjcId, in pACDescrpt as AudioComponentDescription) returns ObjcId binds to "objc:AVAudioUnitMIDIInstrument.-initWithAudioComponentDescription:"
private foreign handler objC_AVAudioUnitMIDIInstrumentChannelPressure(in pAVAUMIDIInstrInstr as ObjcId, in pPressure as UInt8, in pChanl as UInt8 ) returns nothing binds to "objc:AVAudioUnitMIDIInstrument.-sendPressure:onChannel:"
private foreign handler objC_AVAudioUnitMIDIInstrumentEvent(in pAVAUMIDIInstrInstr as ObjcId, in pStatusByte as UInt8, in pDataOne as UInt8,in pDataTwo as UInt8 ) returns nothing binds to "objc:AVAudioUnitMIDIInstrument.-sendMIDIEvent:data1:"
private foreign handler objC_AVAudioUnitMIDIInstrumentEventTwoBytes(in pAVAUMIDIInstrInstr as ObjcId, in pStatusByte as UInt8, in pDataOne as UInt8,in pDataTwo as UInt8 ) returns nothing binds to "objc:AVAudioUnitMIDIInstrument.-sendMIDIEvent:data1:data2:"
private foreign handler objC_AVAudioUnitMIDIInstrumentController(in pAVAUMIDIInstrInstr as ObjcId, in pController as UInt8, in pValue as UInt8, in pChanl as UInt8 ) returns nothing binds to "objc:AVAudioUnitMIDIInstrument.-sendController:withValue:onChannel:"
private foreign handler objC_AVAudioUnitMIDIInstrumentPitchbend(in pAVAUMIDIInstrInstr as ObjcId, in pPitchbend as CUint, in pChanl as UInt8 ) returns nothing binds to "objc:AVAudioUnitMIDIInstrument.-sendPitchBend:onChannel:"
private foreign handler objC_AVAudioUnitMIDIInstrumentProgramChange(in pAVAUMIDIInstrInstr as ObjcId, in pProgram as UInt8, in pChanl as UInt8 ) returns nothing binds to "objc:AVAudioUnitMIDIInstrument.-sendProgramChange:onChannel:"
private foreign handler objC_AVAudioUnitMIDIInstrumentBankAndProgramChange(in pAVAUMIDIInstrInstr as ObjcId, in pProgram as UInt8, in pBankMSB as UInt8, in pBankLSB as UInt8, in pChanl as UInt8 ) returns nothing binds to "objc:AVAudioUnitMIDIInstrument.-sendProgramChange:bankMSB:bankLSB:onChannel:"
-- - (void)sendMIDISysExEvent:(NSData *)midiData;
private foreign handler objC_AVAudioUnitMIDIInstrumentSetValForKey(in pAVAUMIDIInstrInstr as ObjcId, in pValue as ObjcId, in pSelector as ObjcId) returns nothing binds to "objc:AVAudioUnitMIDIInstrument.-setValue:forKey:"
private foreign handler objC_AVAudioUnitMIDIInstrumentGetValForKey(in pAVAUMIDIInstrInstr as ObjcId, in pSelector as ObjcId) returns ObjcId binds to "objc:AVAudioUnitMIDIInstrument.-valueForKey:"

private foreign handler objC_AUAudioUnitGetValForKey(in pAUAudioUnit as ObjcId, in pSelector as ObjcId) returns ObjcId binds to "objc:AUAudioUnit.-valueForKey:"
private foreign handler objC_AUAudioUnitSetValForKey(in pAUAudioUnit as ObjcId, in pValue as ObjcId, in pSelector as ObjcId) returns nothing binds to "objc:AUAudioUnit.-setValue:forKey:"
private foreign handler objC_AUAudioUnitPresetGetValForKey(in pAUAudioUnit as ObjcId, in pSelector as ObjcId) returns ObjcId binds to "objc:AUAudioUnitPreset.-valueForKey:"

private foreign handler objC_AUAudioUnitPresetName(in pAUAudioUnit as ObjcId) returns ObjcId binds to "objc:AUAudioUnitPreset.name"
private foreign handler objC_AUAudioUnitPresetNumber(in pAUAudioUnit as ObjcId) returns ObjcId binds to "objc:AUAudioUnitPreset.number"

private foreign handler objC_AVAudioUnitMIDIInstrumentGetVolume(in pAVAUMIDIInstrInstr as ObjcId) returns ObjcId binds to "objc:AVAudioUnitMIDIInstrument.volume"
private foreign handler objC_AVAudioUnitMIDIInstrumentSetVolume(in pAVAUMIDIInstrInstr as ObjcId) returns ObjcId binds to "objc:AVAudioUnitMIDIInstrument.setVolume"

private foreign handler objC_AVAudioUnitMIDIInstrumentNoteOn(in pAVAUMIDIInstrInstr as ObjcId,in pNoteNum as UInt8, in pNoteVelo as UInt8, in pNoteChan as UInt8) returns nothing binds to "objc:AVAudioUnitMIDIInstrument.-startNote:withVelocity:onChannel:"
private foreign handler objC_AVAudioUnitMIDIInstrumentNoteOff(in pAVAUMIDIInstrInstr as ObjcId, in pNoteNum as UInt8, in pNoteChan as UInt8) returns nothing binds to "objc:AVAudioUnitMIDIInstrument.-stopNote:onChannel:"

private foreign handler objC_AVAudioUnitLoadPresetURL(in pAVAudioUnit as ObjcId, in pFileURL as ObjcId, out pNSError as optional ObjcId) returns CBool binds to "objc:AVAudioUnit.-loadAudioUnitPresetAtURL:error:"

private foreign handler objC_AVAudioUnitGetAUAudioUnit(in pAVAUMIDIInstrInstr as ObjcId) returns ObjcId binds to "objc:AVAudioUnit.AUAudioUnit" -- macOS 10.11+ only
private foreign handler objC_AVAudioUnitGetAUAudioUnitFactoryPresets(in pAUAudioUnit as ObjcId) returns ObjcId binds to "objc:AUAudioUnit.factoryPresets" -- macOS 10.11+ only
private foreign handler objC_AVAudioUnitCurrentPreset(in pAUAudioUnit as ObjcId) returns ObjcId binds to "objc:AUAudioUnit.currentPreset" -- macOS 10.11+ only

private foreign handler c_AudioUnitUninitialize(in pAVAUMIDIInstrInstr as ObjcId) returns CSInt binds to "c:AudioUnit.framework>AudioUnitUninitialize"
private foreign handler c_AudioUnitInitialize(in pAVAUMIDIInstrInstr as ObjcId) returns CSInt binds to "c:AudioUnit.framework>AudioUnitInitialize"

private foreign handler c_AudioUnitGetProperty(in pAudioUnit as Pointer,in pPropertyID as UInt32,in pScope as UInt32, in pElement as UInt32, \
                                       out rProp as any, inout rDataSize as UInt32) returns CSInt binds to "c:AudioUnit.framework>AudioUnitGetProperty"
private foreign handler c_AudioUnitGetPropertyInfo(in pAudioUnit as Pointer,in pPropertyID as UInt32,in pScope as UInt32, in pElement as UInt32, \
                                       out rDataSize as optional Uint32, out rWriteable as CBool) returns CSInt binds to "c:AudioUnit.framework>AudioUnitGetPropertyInfo"

private foreign handler c_AudioUnitSetProperty(in pAudioUnit as Pointer,in pPropertyID as UInt32,in pScope as UInt32, in pElement as UInt32, \
                                       in rProp as any, in rTimeStamp as optional UInt32) returns CSInt binds to "c:AudioUnit.framework>AudioUnitSetProperty"

private foreign handler c_AudioUnitGetPropertyFactoryPresets(in pAudioUnit as Pointer, in pPropertyID as UInt32 , in pScope as UInt32, in pElement as UInt32, \
                                       out rProp as optional Pointer, inout rDataSize as UInt32) returns CSInt binds to "c:AudioUnit.framework>AudioUnitGetProperty"

public foreign type AudioUnitCocoaViewInfo binds to "MCAggregateTypeInfo:rr"
private foreign handler c_AudioUnitGetPropertyAudioUnitCocoaViewInfo(in pAudioUnit as Pointer,in pPropertyID as UInt32,in pScope as UInt32, in pElement as UInt32, \
                                       out rPtr as optional AudioUnitCocoaViewInfo, inout rDataSize as optional UInt32) returns CSInt binds to "c:AudioUnit.framework>AudioUnitGetProperty"
private foreign handler c_AudioUnitGetPropertyPtr(in pAudioUnit as Pointer,in pPropertyID as UInt32,in pScope as UInt32, in pElement as UInt32, \
                                       out rPtr as optional Pointer, inout rDataSize as optional UInt32) returns CSInt binds to "c:AudioUnit.framework>AudioUnitGetProperty"

private foreign handler objC_AVAudioNodeGetNumberOfInputs(in pAVAUMIDIInstrInstr as ObjcId) returns NaturalUInt binds to "objc:AVAudioNode.numberOfInputs"
private foreign handler objC_AVAudioNodeGetNumberOfOutputs(in pAVAUMIDIInstrInstr as ObjcId) returns NaturalUInt binds to "objc:AVAudioNode.numberOfOutputs"
private foreign handler objC_AVAudioNodeGetEngine(in pAVAUMIDIInstrInstr as ObjcId) returns ObjcId binds to "objc:AVAudioNode.engine"

private foreign handler objC_AVAudioUnitAUComponentManager() returns ObjcId binds to "objc:AVAudioUnitComponentManager.+sharedAudioUnitComponentManager"
private foreign handler objC_AVAudioUnitGetAudioUnitsFromACDesc(in pSharedAudioUnitComponentManager as ObjcId, in pAudioComponentDescription as AudioComponentDescription) returns ObjcId \
                        binds to "objc:AVAudioUnitComponentManager.-componentsMatchingDescription:"

private foreign handler objC_AVAudioUnitGetACDescription(in pAVAUMIDIInstrInstr as ObjcId) returns AudioComponentDescription binds to "objc:AVAudioUnit.audioComponentDescription"
private foreign handler objC_AVAudioUnitComponentGetACDescription(in pAVAudioUnit as ObjcId) returns AudioComponentDescriptionReturn binds to "objc:AVAudioUnitComponent.audioComponentDescription"

private foreign handler objC_AVAudioUnitGetName(in pAVAUMIDIInstrInstr as ObjcId) returns ObjcId binds to "objc:AVAudioUnit.name"
private foreign handler objC_AVAudioUnitComponentGetName(in pAVAudioUnit as ObjcId) returns ObjcId binds to "objc:AVAudioUnitComponent.name"

private foreign handler objC_AVAudioUnitGetManufacturer(in pAVAUMIDIInstrInstr as ObjcId) returns ObjcId binds to "objc:AVAudioUnit.manufacturerName"
private foreign handler objC_AVAudioUnitComponentGetManufacturer(in pAVAudioUnit as ObjcId) returns ObjcId binds to "objc:AVAudioUnitComponent.manufacturerName"

private foreign handler objC_AVAudioUnitGetVersion(in pAVAUMIDIInstrInstr as ObjcId) returns UInt64 binds to "objc:AVAudioUnit.version"
private foreign handler objC_AVAudioUnitComponentGetVersion(in pAVAudioUnit as ObjcId) returns UInt64 binds to "objc:AVAudioUnitComponent.version"

private foreign handler objC_AVAudioUnitGetAudioUnit(in pAVAUMIDIInstrInstr as ObjcId) returns Pointer binds to "objc:AVAudioUnit.audioUnit"
private foreign handler objC_AVAudioUnitComponentGetAudioUnit(in pAVAudioUnit as ObjcId) returns ObjcId binds to "objc:AVAudioUnitComponent.audioUnit" -- macOS 10.11+ only

private foreign handler objC_AVAudioUnitAUComponentManagerTagNames(in pSharedAudioUnitComponentManager as ObjcId) returns ObjcId binds to "objc:AVAudioUnitComponentManager.tagNames"
private foreign handler objC_AVAudioUnitGetHasMIDIInput(in pAVAudioUnit as ObjcId) returns CBool binds to "objc:AVAudioUnitComponent.hasMIDIInput"
private foreign handler objC_AVAudioUnitGetHasMIDIOutput(in pAVAudioUnit as ObjcId) returns CBool binds to "objc:AVAudioUnitComponent.hasMIDIOutput"
private foreign handler objC_AVAudioUnitGetIconURL(in pAVAudioUnit as ObjcId) returns ObjcId binds to "objc:AVAudioUnitComponent.iconURL"
private foreign handler objC_AVAudioUnitGetComponentURL(in pAVAudioUnit as ObjcId) returns ObjcId binds to "objc:AVAudioUnitComponent.componentURL"
private foreign handler objC_AVAudioUnitGetArchitectures(in pAVAudioUnit as ObjcId) returns ObjcId binds to "objc:AVAudioUnitComponent.availableArchitectures"
private foreign handler objC_AVAudioUnitGetVersionNSStr(in pAVAudioUnit as ObjcId) returns ObjcId binds to "objc:AVAudioUnitComponent.versionString"
private foreign handler objC_AVAudioUnitGetTypeName(in pAVAudioUnit as ObjcId) returns ObjcId binds to "objc:AVAudioUnitComponent.typeName"

private foreign handler objC_AVAudioUnitGetConfignDict(in pAVAudioUnit as ObjcId) returns optional any binds to "objc:AVAudioUnitComponent.configurationDictionary"

private foreign handler objC_AVAudioUnitGetIsSandboxSafe(in pAVAudioUnit as ObjcId) returns CBool binds to "objc:AVAudioUnitComponent.isSandboxSafe"

private foreign handler objC_AVAudioUnitComponentHasCustomView(in pAVAudioUnit as ObjcId) returns CBool binds to "objc:AVAudioUnitComponent.hasCustomView"
private foreign handler objC_AVAudioUnitComponentGetAllTagNames(in pAVAudioUnit as ObjcId) returns ObjcId binds to "objc:AVAudioUnitComponent.allTagNames"
private foreign handler objC_AVAudioUnitComponentGetComponent(in pAVAudioUnit as ObjcId) returns optional any binds to "objc:AVAudioUnitComponent.audioComponent"
private foreign handler objC_AVAudioUnitComponentPassesValidation(in pAVAudioUnit as ObjcId) returns CBool binds to "objc:AVAudioUnitComponent.passesAUVal"

-- foreign handler cSizeOf(in pPointer as Pointer) returns UIntSize binds to "c:sizeof"
-- foreign handler cSizeOf(in pPointer as Pointer) returns UIntSize binds to "<builtin>"
-- must re-read Dr. Peter Bretts blog on tapping the C standard library symbols

private variable sAVAudioEngine as optional ObjcObject
private variable sAVAudioMainMixerNode as optional ObjcObject
private variable sAVAudioUnitMIDIInstrument as optional ObjcObject

public handler AVAudioUnitCMGetMIDIInstruments(in pAUSubType as optional String, in pAUManufacturer as optional String) returns optional any
   variable tCBool as Boolean
   variable tArray as Array
   variable tList as optional List
   variable tElement as optional any
   variable tNSNumber as optional ObjcObject
   variable tNumber as optional Number
   variable tTempNSObj as optional ObjcObject
   variable rTempStr as optional String
   variable tTempStr as optional String
   variable tOSStatus as optional CSInt

   variable tAVAudioUnitsManagerInstance as optional ObjcObject
   variable tAudioComponentDescription as optional AudioComponentDescription
   variable tAudioComponentDescrParse as optional AudioComponentDescriptionReturn
   variable tMatchingtAudioComponentsNSArray as optional ObjcObject
   variable tAVAUAudioComponent as optional ObjcObject
   variable tAudioComponent as optional ObjcObject

   variable tAudioComponentsList as optional List
   variable tComponentType as UInt32
   variable tComponentSubType as UInt32
   variable tComponentManufacturer as UInt32
   variable tComponentFlags as UInt32
   variable tComponentFlagsMask as UInt32
   unsafe
   ------------------- Get Shared AUComponentManager -------------------------
    put objC_AVAudioUnitAUComponentManager() into tAVAudioUnitsManagerInstance
    ----------------------------- ComponentType ------------------------------
    put 1635085685 into tComponentType -- aumu - kAudioUnitType_MusicDevice
   ------------------------------- AUSubType --------------------------
   if pAUSubType is not "" then
      put getIntegerFromFourCharCodeBigEndian(pAUSubType) into tComponentSubType
    else
      put 0 into tComponentSubType
    end if
  ----------------------------- Manufacturers -------------------------
  if pAUManufacturer is not "" then
     -- log pAUManufacturer
     if pAUManufacturer is "Apple" then
        put 1634758764 into tComponentManufacturer
     else if pAUManufacturer is "Native Instruments" then
        put 760105261 into tComponentManufacturer
     else
        put getIntegerFromFourCharCodeBigEndian(pAUManufacturer) into tComponentManufacturer
     end if
   else
        put 0 into tComponentManufacturer
   end if

    put [tComponentType,tComponentSubType,tComponentManufacturer,0,0] into tAudioComponentDescription
    put objC_AVAudioUnitGetAudioUnitsFromACDesc(tAVAudioUnitsManagerInstance,tAudioComponentDescription) into tMatchingtAudioComponentsNSArray
   if tMatchingtAudioComponentsNSArray is not nothing then
      put ListFromNSArray(tMatchingtAudioComponentsNSArray) into tAudioComponentsList
      put "" into rTempStr
      repeat for each element tAVAUAudioComponent in tAudioComponentsList

         put objC_AVAudioUnitGetName(tAVAUAudioComponent) into tTempNSObj
         if tTempNSObj is not nothing then
            put StringFromNSString(tTempNSObj) after rTempStr
         else
            put "Unnammed" after rTempStr
         end if
         put "," after rTempStr

         put objC_AVAudioUnitGetManufacturer(tAVAUAudioComponent) into tTempNSObj
         if tTempNSObj is not nothing then
            put StringFromNSString(tTempNSObj) after rTempStr
         else
            put "Unknown" after rTempStr
         end if
         put "," after rTempStr

         -- put objC_AVAudioUnitGetVersion(tAVAUAudioComponent) into tNumber -- NaturalUInt
         -- put tNumber formatted as string & newline after rTempStr
         put objC_AVAudioUnitGetVersionNSStr(tAVAUAudioComponent) into tTempNSObj
         if tTempNSObj is not nothing then
            put "v." & StringFromNSString(tTempNSObj) after rTempStr
         else
            put "Unknown" after rTempStr
         end if
         put "," after rTempStr

         if objC_AVAudioUnitGetHasMIDIInput(tAVAUAudioComponent) then
            put "MIDI In," after rTempStr
         else
            put "No MIDI In," after rTempStr
         end if
         if objC_AVAudioUnitGetHasMIDIOutput(tAVAUAudioComponent) then
            put "MIDI Out," after rTempStr
         else
            put "No MIDI Out," after rTempStr
         end if
         if the last char of rTempStr is "," then
            delete the last char of rTempStr
         end if
         put "," after rTempStr

         ----------------------- Architectures ---------------------
         put objC_AVAudioUnitGetArchitectures(tAVAUAudioComponent) into tTempNSObj -- an NS Array of Constants that corespond to CPU Architectures
         put ListFromNSArray(tTempNSObj) into tList
         if tList is the empty list then
            put "Unknown" after rTempStr
         else
            repeat for each element tNumber in tList
            -- ArchitecturePPC=0x00000012= 18 --- ArchitecturePPC64=0x01000012= 16777234   --- ArchitectureI386=0x00000007= 7 --- ArchitectureX86_64=0x01000007= 16777223
               if tNumber = 18 then
                     put "PPC " after rTempStr
                  else if tNumber = 16777234 then
                     put "PPC64 " after rTempStr
                  else if tNumber = 7 then
                     put "x86 " after rTempStr
                  else if tNumber = 16777223 then
                     put "x86_64 " after rTempStr
                  else if tNumber = 16777228 then
                     put "ARM64 " after rTempStr
                  end if
            end repeat
            if the last char of rTempStr is " " then
               delete the last char of rTempStr
            end if
         end if
         put "," after rTempStr

         put objC_AVAudioUnitComponentGetACDescription(tAVAUAudioComponent) into tAudioComponentDescrParse
         --- Type OStype ---
         put the char with code (element 4 of tAudioComponentDescrParse) & the char with code (element 3 of tAudioComponentDescrParse) & \
            the char with code (element 2 of tAudioComponentDescrParse) & the char with code (element 1 of tAudioComponentDescrParse) & "," after rTempStr
         --- SubType OStype ---
         put the char with code (element 8 of tAudioComponentDescrParse) & the char with code (element 7 of tAudioComponentDescrParse) & \
            the char with code (element 6 of tAudioComponentDescrParse) & the char with code (element 5 of tAudioComponentDescrParse) & "," after rTempStr
         --- Manufacturer OStype ---
         put the char with code (element 12 of tAudioComponentDescrParse) & the char with code (element 11 of tAudioComponentDescrParse) & \
            the char with code (element 10 of tAudioComponentDescrParse)  & the char with code (element 9 of tAudioComponentDescrParse) & "," after rTempStr

         put objC_AVAudioUnitGetIsSandboxSafe( tAVAUAudioComponent ) into tCBool
         if tCBool is true then
            put "true \t" after rTempStr
         else
            put "false \t" after rTempStr
         end if

         put objC_AVAudioUnitComponentHasCustomView( tAVAUAudioComponent ) into tCBool
         -- log ["Custom UI", tCBool]
         if tCBool is true then
            put "true \t" after rTempStr
         else
            put "false \t" after rTempStr
         end if

         -----  userTagNames [String] -- get & set property can be used to add tags by users

         --------- component URL -----------------
         --put objC_AVAudioUnitGetComponentURL( tAVAUAudioComponent ) into tTempNSObj
         --put objC_NSURLGetAbsoluteString(tTempNSObj) into tTempNSObj
         --if tTempNSObj is not nothing then
            --put StringFromNSString(tTempNSObj) & "," after rTempStr
         --end if
         --------- component Icon URL -----------------
         --put nothing into tTempNSObj
         --put objC_AVAudioUnitGetIconURL( tAVAUAudioComponent ) into tTempNSObj
         -- put objC_NSURLGetPath(tTempNSObj) into tTempNSObj
         --if tTempNSObj is not nothing then
         ---   put StringFromNSString(tTempNSObj) & "," after rTempStr
         --end if
         -----------------------------------------------------------
         ---------- CRASHES LC ENGINE:
         -- put objC_AVAudioUnitComponentGetComponent( tAVAUAudioComponent ) into tTempNSObj -- Use to get underlying Audio Component for use with lower level Core Audio API
         -- log tElement

        -- configurationDictionary
        -- put objC_AVAudioUnitGetConfignDict(tAVAUAudioComponent) into tElement-- this seems to be unused -- returns <null>
        -- log tElement
       --  put objC_AVAudioUnitComponentPassesValidation( tAVAUAudioComponent ) into tCBool
        -- if tCBool is true then
       --     put "true \t" after rTempStr
        -- else
       --     put "false \t" after rTempStr
       --  end if

        put "\n" after rTempStr
       end repeat
    end if
   end unsafe
   return rTempStr
end handler

/**
Setup Audio Engine with attached MIDIInstrument AudioUnit.

Type: function

Example:
AVAudioEngineMIDIInstrumentInit()

Returns: True on success, False or error string on failure, or the string "AVAudioUnitMIDIInstrument is already running."

Description:
Attempts to initializes instances of Audio Engine, Output Mixer, and MIDIInstrument AudioUnit and attach them together.
*/
public handler AVAudioUnitMIDIInstrumentInitWithDescr(in pAUSubType as optional String, in pAUManufacturer as optional String) returns optional any
   variable tSoundFontNSURL as ObjcObject
   variable tAVAudioEngineDidStart as Boolean
   variable tNSError as optional ObjcObject
   variable tNSErrorDescriptionRef as ObjcObject
   variable tErrorDescription as optional String
   variable tAudioComponentDescription as AudioComponentDescription
   variable tNSObj as optional ObjcObject
   variable tNumber as optional Number -- Integer
   variable tComponentType as UInt32
   variable tComponentSubType as UInt32
   variable tComponentManufacturer as UInt32
   variable tComponentFlags as UInt32
   variable tComponentFlagsMask as UInt32
   variable tAudioUnit as optional ObjcObject

   ----------------------------- ComponentType ------------------------------
   put 1635085685 into tComponentType -- Music Device - pAUType as optional String
   ------------------------------- AUSubType --------------------------
   if pAUSubType is not "" then
      put getIntegerFromFourCharCodeBigEndian(pAUSubType) into tComponentSubType
   else
      put getIntegerFromFourCharCodeBigEndian("msyn") into tComponentSubType
   end if
   ----------------------------- Manufacturers -------------------------
   if pAUManufacturer is not "" then
      if pAUManufacturer is "Apple" then
         put 1634758764 into tComponentManufacturer
      else if pAUManufacturer is "Native Instruments" then
         put 760105261 into tComponentManufacturer
      else
         put getIntegerFromFourCharCodeBigEndian(pAUManufacturer) into tComponentManufacturer
      end if
   else
      put 1634758764 into tComponentManufacturer -- Apple
   end if
   put [tComponentType,tComponentSubType,tComponentManufacturer,0,0] into tAudioComponentDescription

   if sAVAudioEngine is nothing then
      unsafe
         put objC_AVAudioEngineAlloc() into sAVAudioEngine
         put objC_AVAudioEngineInit(sAVAudioEngine) into sAVAudioEngine
         -- log sAVAudioEngine

         put objC_AVAudioUnitMIDIInstrumentAlloc() into sAVAudioUnitMIDIInstrument
         put objC_AVAudioUnitMIDIInstrumentInitWithDescr(sAVAudioUnitMIDIInstrument, tAudioComponentDescription) into sAVAudioUnitMIDIInstrument
         log sAVAudioUnitMIDIInstrument
         if sAVAudioUnitMIDIInstrument is nothing then
            return "Error loading AU Type:" & pAUSubType &","& pAUManufacturer
         end if
         objC_AVAudioEngineAttachNode(sAVAudioEngine,sAVAudioUnitMIDIInstrument)
         LogNSObjectClassName(sAVAudioEngine)
         -- LogNSObjectClassName(sAVAudioUnitMIDIInstrument)
         -- check engine to see if it attached the instrument node sucessfully:
         -- put objC_AVAudioNodeGetEngine(sAVAudioUnitMIDIInstrument) into tNSObj -- Null if Node is not attached to an AVAudioEngine

         -- put objC_AVAudioEngineGetOutputNode(sAVAudioEngine) into tNSObj
         -- put objC_AVAudioEngineGetInputNode(sAVAudioEngine) into tNSObj
         put objC_AVAudioEngineGetMainMixerNode(sAVAudioEngine) into sAVAudioMainMixerNode
         -- engine.connect(MIDIInstrument, to: engine.mainMixerNode, format: nil)
         objC_AVAudioEngineConnectSourceToDest(sAVAudioEngine,sAVAudioUnitMIDIInstrument,sAVAudioMainMixerNode,nothing)
         objC_AVAudioEnginePrepareToStart(sAVAudioEngine)
         put objC_AVAudioEngineStart(sAVAudioEngine,tNSError) into tAVAudioEngineDidStart
         if tAVAudioEngineDidStart is true then
            return true
         else
            if tNSError is not nothing then
               put c_CFErrorCopyDescription(tNSError) into tNSErrorDescriptionRef
               put StringFromNSString(tNSErrorDescriptionRef) into tErrorDescription
               return tErrorDescription
            else
               return false
            end if
         end if
      end unsafe
   else
      unsafe
         CloseAUWindow()
         objC_AVAudioEngineStop(sAVAudioEngine)
         objC_AVAudioEngineDisconnectInputNode(sAVAudioEngine,sAVAudioUnitMIDIInstrument)
         objC_AVAudioEngineDetachNode(sAVAudioEngine,sAVAudioUnitMIDIInstrument)
         -- objC_AVAudioEngineDetachNode(sAVAudioEngine,sAVAudioMainMixerNode)

         put objC_AVAudioUnitMIDIInstrumentAlloc() into sAVAudioUnitMIDIInstrument
         put objC_AVAudioUnitMIDIInstrumentInitWithDescr(sAVAudioUnitMIDIInstrument, tAudioComponentDescription) into sAVAudioUnitMIDIInstrument
         -- log sAVAudioUnitMIDIInstrument
         objC_AVAudioEngineAttachNode(sAVAudioEngine,sAVAudioUnitMIDIInstrument)
         -- check engine to see if it attached the instrument node sucessfully:
         -- put objC_AVAudioNodeGetEngine(sAVAudioUnitMIDIInstrument) into tNSObj -- Null if Node is not attached to an AVAudioEngine

         -- put objC_AVAudioEngineGetOutputNode(sAVAudioEngine) into tNSObj
         -- put objC_AVAudioEngineGetInputNode(sAVAudioEngine) into tNSObj
         put objC_AVAudioEngineGetMainMixerNode(sAVAudioEngine) into sAVAudioMainMixerNode
         -- engine.connect(MIDIInstrument, to: engine.mainMixerNode, format: nil)
         objC_AVAudioEngineConnectSourceToDest(sAVAudioEngine,sAVAudioUnitMIDIInstrument,sAVAudioMainMixerNode,nothing)
         objC_AVAudioEnginePrepareToStart(sAVAudioEngine)
         put objC_AVAudioEngineStart(sAVAudioEngine,tNSError) into tAVAudioEngineDidStart
      end unsafe
   end if
end handler

/**
Check if AVAudioUnitMIDIInstrument's AudioEngine is already running.

Type: function

Example:
AVAudioUnitMIDIInstrumentEngineIsRunning()

Returns: True if the AVAudioUnitMIDIInstrument's AudioEngine is already running, false if it is not.

Description:
Check if AVAudioUnitMIDIInstrument's AudioEngine instance is already running.
*/
public handler AVAudioUnitMIDIInstrumentEngineIsRunning() returns optional any
   if sAVAudioEngine is nothing then
      return false
   else
      variable tIsRunning as CBool
         unsafe
            put objC_AVAudioEngineIsRunning(sAVAudioEngine) into tIsRunning
         end unsafe
      return tIsRunning
   end if
end handler

/**
Restarts the AVAudioUnitMIDIInstrument Engine.

Type: command

Example:
AVAudioUnitMIDIInstrumentEngineRestart

Description:
Restarts the AVAudioUnitMIDIInstrument Engine after it has been stopped or paused.
*/
public handler AVAudioUnitMIDIInstrumentEngineRestart() returns nothing
   variable tAVAudioEngineDidStart as Boolean
   variable tNSError as optional ObjcObject
   variable tNSErrorDescriptionRef as ObjcObject
   variable tErrorDescription as optional String
   if sAVAudioEngine is not nothing then
      unsafe
         put objC_AVAudioEngineStart(sAVAudioEngine,tNSError) into tAVAudioEngineDidStart
         if tNSError is not nothing then
            put c_CFErrorCopyDescription(tNSError) into tNSErrorDescriptionRef
            put StringFromNSString(tNSErrorDescriptionRef) into tErrorDescription
            log tErrorDescription
         end if
      end unsafe
   end if
end handler

/**
Stops the AVAudioUnitMIDIInstrument Engine running.

Type: command

Example:
AVAudioUnitMIDIInstrumentEngineStop

Description:
Stops the running AVAudioUnitMIDIInstrument Engine. The Engine should be stopped or paused when not in use to avoid device CPU and battery useage.
*/
public handler AVAudioUnitMIDIInstrumentEngineStop() returns nothing
   unsafe
      objC_AVAudioEngineStop(sAVAudioEngine)
   end unsafe
end handler

/**
Temporarily pauses the running AVAudioUnitMIDIInstrument Engine.

Type: command

Example:
AVAudioUnitMIDIInstrumentEnginePause

Description:
Temporarily pauses the running AVAudioUnitMIDIInstrument Engine. The Engine should be stopped or paused when not in use to avoid device CPU and battery useage.
*/
public handler AVAudioUnitMIDIInstrumentEnginePause() returns nothing
   unsafe
      objC_AVAudioEnginePause(sAVAudioEngine)
   end unsafe
end handler

/**
Resets the AVAudioUnitMIDIInstrument Engine to default state.

Type: command

Example:
AVAudioUnitMIDIInstrumentEngineReset

Description:
This resets AVAudioUnitMIDIInstrument Engine to it's default state. Use it, for example, to silence effects such as delay echoes.
*/
public handler AVAudioUnitMIDIInstrumentEngineReset() returns nothing
   unsafe
      objC_AVAudioEngineReset(sAVAudioEngine)
   end unsafe
end handler

/**
Loads a soundbank file or type SF2 or DLS into AVAudioUnitMIDIInstrument and optional sets it to a given program or patch and bank.

Type: command

Syntax: AVAudioSamplerLoadSF2DLS pSoundBankPath, pProgramNum, pBankMSB, pBankLSB

Example:
put "/System/Library/Components/CoreAudio.component/Contents/Resources/gs_instruments.dls" into pSoundFontPath -- Apple's default instrument sounds
AVAudioSamplerLoadSF2DLS pSoundFontPath,19,,  -- General MIDI Rock Organ

Parameters:
pSoundFontPath: The path to a Soundbank file
pProgramNum: A Program number to set 0 to 127
pBankMSB: Bank number Most Significant Byte
pBankLSB: Bank number Least Significant Byte

Description: Loads a soundbank file or type SF2 or DLS into AVAudioSampler and optional sets it to a given program or patch and bank.
*/
public handler AVAudioUnitMIDIInstrumentBankProgram( in pProgramNum as optional Integer, in pBankMSB as optional Integer, in pBankLSB as optional Integer, in pChannel as optional Integer) returns optional any
   variable tSoundFontNSURL as ObjcObject
   variable tNSError as optional ObjcObject
   variable tNSErrorDescriptionRef as ObjcObject
   variable tErrorDescription as optional String
   variable tDidLoad as Boolean
   variable tOSStatus as CSInt
   variable tAVAudioUnit as ObjcId
   variable tNSObj as ObjcId

   if sAVAudioUnitMIDIInstrument is not nothing then
      -- if pSoundFontPath is nothing then
      --    put "/System/Library/Components/CoreAudio.component/Contents/Resources/gs_instruments.dls" into pSoundFontPath
      -- end if
      if pProgramNum is nothing then
         put 0 into pProgramNum
      end if
      if pBankMSB is nothing then
         put 0x79 into pBankMSB
      end if
      if pBankLSB is nothing then
         put 0 into pBankLSB
      end if
      if pChannel is nothing then
         put 1 into pChannel
      end if
      unsafe
      -- put objC_NSURLfileURLWithPath(StringToNSString("/System/Library/Components/CoreAudio.component/Contents/Resources/gs_instruments.dls")) into tSoundFontNSURL
      -- put objC_NSURLfileURLWithPath(StringToNSString(pSoundFontPath)) into tSoundFontNSURL
         -- objC_AVAudioUnitMIDIInstrumentBankAndProgramChange(in pAVAUMIDIInstrInstr as ObjcId, in pProgram as UInt8, in pBankMSB as UInt8, in pBankLSB as UInt8, in pChanl as UInt8 ) returns nothing
       objC_AVAudioUnitMIDIInstrumentBankAndProgramChange(sAVAudioUnitMIDIInstrument,pProgramNum,pBankMSB,pBankLSB,pChannel - 1)-- MSB 0x79 (121) for melodic bank?, 0x78 (120) or 0x7F (127) for drum bank?
      --  put objC_AVAudioUnitMIDIInstrumentLoadSoundBankInstrURL(sAVAudioUnitMIDIInstrument,tSoundFontNSURL,pProgramNum,pBankMSB,pBankLSB,tNSError) into tDidLoad-- MSB 0x79 (121) for melodic bank?, 0x78 (120) or 0x7F (127) for drum bank?
         --put objC_AVAudioUnitSamplerLoadSoundBankInstrURL(sAVAudioUnitMIDIInstrument,tSoundFontNSURL,pProgramNum,pBankMSB,pBankLSB,tNSError) into tDidLoad-- MSB 0x79 (121) for melodic bank?, 0x78 (120) or 0x7F (127) for drum bank?

         -- To load the Sound Font, set the kMusicDeviceProperty_SoundBankURL property on your unit. I’m using a SoundFont from MuseScore here.
       --  put objC_AVAudioUnitGetAudioUnit(sAVAudioUnitMIDIInstrument) into tAVAudioUnit
        -- log tAVAudioUnit
         -- put c_AudioUnitSetProperty(tAVAudioUnit,1100,0,0,tSoundFontNSURL,0) into tOSStatus ---  UInt32(sizeof(bankURL.dynamicType) ) into tOSStatus --
         -- 1100 = kMusicDeviceProperty_SoundBankURL
         -- 0 is kAudioUnitScope_Global
         -- OSStatus AudioUnitSetParameter(AudioUnit inUnit, AudioUnitParameterID inID, AudioUnitScope inScope, AudioUnitElement inElement, AudioUnitParameterValue inValue, UInt32 inBufferOffsetInFrames);
         -- Parameters: inUnit The audio unit that you want to set a parameter value for. inID The audio unit parameter identifier. inScope The audio unit scope for the parameter. inElement The audio unit element for the parameter.
         --                    inValue The value that you want to apply to the parameter. inBufferOffsetInFrames Set this to 0. To schedule the setting of a parameter value, use the AudioUnitScheduleParameters function.

          if tNSError is not nothing then
             put c_CFErrorCopyDescription(tNSError) into tNSErrorDescriptionRef
             put StringFromNSString(tNSErrorDescriptionRef) into tErrorDescription
             return tErrorDescription
          else
            return true
          end if
       end unsafe
    end if
 end handler

public handler AVAudioUnitMIDIInstrumentProgram( in pProgramNum as optional Integer, in pChannel as optional Integer) returns optional any
    variable tSoundFontNSURL as ObjcObject
    variable tNSError as optional ObjcObject
    variable tNSErrorDescriptionRef as ObjcObject
    variable tErrorDescription as optional String
    variable tDidLoad as Boolean
    variable tOSStatus as CSInt
    variable tAVAudioUnit as ObjcId
    variable tNSObj as ObjcId

    if sAVAudioUnitMIDIInstrument is not nothing then
       if pProgramNum is nothing then
          put 0 into pProgramNum
       end if
       if pChannel is nothing then
          put 1 into pChannel
       end if
       unsafe
         objC_AVAudioUnitMIDIInstrumentProgramChange(sAVAudioUnitMIDIInstrument,pProgramNum,pChannel -1)-- MSB 0x79 (121) for melodic bank?, 0x78 (120) or 0x7F (127) for drum bank?
           if tNSError is not nothing then
              put c_CFErrorCopyDescription(tNSError) into tNSErrorDescriptionRef
              put StringFromNSString(tNSErrorDescriptionRef) into tErrorDescription
              return tErrorDescription
           else
             return true
           end if
        end unsafe
     end if
end handler

/**
Attempts to Load an AUPreset file into the AVAudioUnitMIDIInstrument.

Type: command

Syntax: AVAudioUnitMIDIInstrumentLoadAUPreset pAUPresetPath

Example:
put "/Library/Application Support/GarageBand/Instrument Library/Sampler/Sampler Instruments/iOS Instruments/Flute iOS KB.exs" into pEXSPresetOrSoundPath
AVAudioSamplerLoadEXSPresetOrSound pAUPresetPath

Parameters:
pAUPresetPath: The file path to a EXS or AUPreset file

Description: Attempts to Load an Patch AUPreset file into the AVAudioUnitMIDIInstrument.
*/
public handler AVAudioUnitMIDIInstrumentLoadAUPreset(in pAUPresetPath as optional String) returns optional any
   variable tAUPresetURL as ObjcObject
   variable tNSError as optional ObjcId
   variable tNSErrorDescriptionRef as ObjcId
   variable tErrorDescription as optional String
   variable tDidLoad as Boolean
   if sAVAudioUnitMIDIInstrument is not nothing then
      unsafe
         log pAUPresetPath
         put objC_NSURLfileURLWithPath(StringToNSString(pAUPresetPath)) into tAUPresetURL
         log tAUPresetURL
         put objC_AVAudioUnitLoadPresetURL(sAVAudioUnitMIDIInstrument,tAUPresetURL,tNSError) into tDidLoad
         if tNSError is not nothing then
            put c_CFErrorCopyDescription(tNSError) into tNSErrorDescriptionRef
            put StringFromNSString(tNSErrorDescriptionRef) into tErrorDescription
            return tErrorDescription
         else
            return true
         end if
      end unsafe
   end if
end handler

/**
Gets info About the running AVAudioUnitMIDIInstrument.

Type: function

Example:
get AVAudioUnitMIDIInstrumentInfo()

Returns: Comma seperated string of items. Name, Manufacturer, Version, Number of Inputs, Number of Outputs, AudioComponentDescription

Description:
Gets info About the running AVAudioUnitMIDIInstrument, mostly here for developement usage for now.
*/
public handler AVAudioUnitMIDIInstrumentInfo() returns optional any
   variable tAudioComponentDescription as AudioComponentDescription
   variable tAudioUnitComponent as optional any
   variable tAUAudioUnit as ObjcObject
   variable tAudioUnit as Pointer

   variable tListIterand as any
   variable tNSError as optional ObjcObject
   variable tNSErrorDescriptionRef as ObjcId
   variable tErrorDescription as optional String
   variable tBool as CBool
   variable tOSStatus as CSInt
   variable tInfoChunk as String
   variable tNSStrObj as optional ObjcId
   variable tStr as optional String
   variable tNSObj as optional ObjcId
   variable tNSObject as optional ObjcObject
   variable tDataPtr as optional Pointer
   variable tData as any

   variable rWriteable as Boolean
   variable rDataSize as UInt32

   variable tNumber as optional Number -- Integer
   variable rPropertySizePtr as Pointer
   variable rAnything as optional any

   variable tAudioUnitProperty as UInt32
   variable tAudioUnitScope as UInt32
   variable tAudioUnitElement as UInt32

   unsafe
      put objC_AVAudioUnitGetName(sAVAudioUnitMIDIInstrument) into tNSStrObj
      put StringFromNSString(tNSStrObj) into tStr
      put "Name: " & tStr & newline into tInfoChunk
      put objC_AVAudioUnitGetManufacturer(sAVAudioUnitMIDIInstrument)into tNSStrObj
      put StringFromNSString(tNSStrObj) into tStr
      put "Manufacturer: " & tStr & newline after tInfoChunk
      put objC_AVAudioUnitGetVersion(sAVAudioUnitMIDIInstrument) into tNumber -- NaturalUInt
      put "Version: " & tNumber formatted as string & newline after tInfoChunk
      put objC_AVAudioNodeGetNumberOfInputs(sAVAudioUnitMIDIInstrument) into tNumber
      put "Inputs: " & tNumber formatted as string & newline after tInfoChunk
      put objC_AVAudioNodeGetNumberOfOutputs(sAVAudioUnitMIDIInstrument) into tNumber
      put "Outputs: " & tNumber formatted as string & newline after tInfoChunk
      put objC_AVAudioUnitGetACDescription(sAVAudioUnitMIDIInstrument) into tAudioComponentDescription
      put "AudioComponentDescription: " after tInfoChunk
      put getFourCharCodeFromUint32(element 1 of tAudioComponentDescription) after tInfoChunk
      put "," after tInfoChunk
      put getFourCharCodeFromUint32(element 2 of tAudioComponentDescription) after tInfoChunk
      put "," after tInfoChunk
      put getFourCharCodeFromUint32(element 3 of tAudioComponentDescription) after tInfoChunk

      put "," after tInfoChunk
      put element 4 of tAudioComponentDescription formatted as string after tInfoChunk
      put "," after tInfoChunk
      put element 5 of tAudioComponentDescription formatted as string after tInfoChunk


      -- check engine to see if itsAVAudioUnitMIDIInstrument is attached to it
      -- put objC_AVAudioNodeGetEngine(sAVAudioUnitMIDIInstrument) into tNSObj -- Null if Node is not attached to an AVAudioEngine
      -- log tNSObj
   end unsafe
   return tInfoChunk
end handler

private foreign handler c_NSClassFromString(in pClassNameString as ObjcId) returns ObjcId binds to "c:NSClassFromString"
private foreign handler c_class_copyPropertyList(in pClass as ObjcId, out pCount as UInt32) returns optional Pointer binds to "c:class_copyPropertyList"

private foreign handler objC_NSObjectRetain(in pNSObj as ObjcId) returns ObjcId binds to "objc:NSObject.-retain"
private foreign handler objC_NSObjectAutoRealease(in pNSObj as ObjcId) returns ObjcId binds to "objc:NSObject.-autorelease"
private foreign handler objC_NSObjectRelease(in pNSObj as ObjcId) returns nothing binds to "objc:NSObject.-release"
private foreign handler objC_NSObjectDescription(in pNSObj as optional ObjcId) returns ObjcId binds to "objc:NSObject.description"
private foreign handler objC_NSObjectClassName(in pNSObj as ObjcId) returns ObjcId binds to "objc:NSObject.className"
private foreign handler objC_NSObjectGetSuperClass(in pNSObj as ObjcId) returns ObjcId binds to "objc:NSObject.superclass"
private foreign handler objC_NSObjectGetDescription(in pNSObj as ObjcId) returns ObjcId binds to "objc:NSObject.description"
public foreign handler objC_NSObjectClassDescription(in pNSObject as ObjcId) returns optional ObjcId binds to "objc:NSObject.-classDescription"
public foreign handler objC_NSObjectGetAttributeKeys(in pNSObject as ObjcId) returns optional ObjcId binds to "objc:NSObject.attributeKeys"
private foreign handler ObjC_NSObjectGetClassNamed( in pNSClassName as ObjcId) returns optional ObjcId binds to "objc:NSObject.-classNamed:"

public foreign handler objC_NSObjectsGetClassDescriptionForClass(in pClasss as ObjcId) returns optional ObjcRetainedId binds to "objc:NSClassDescription.+classDescriptionForClass:"


public handler LogNSObjectClassName(in pNSObj as optional ObjcId)
   variable tOSStatus as CSInt
   variable tNSStrObj as optional ObjcId
   variable tNSObjB as optional ObjcId
   variable tStr as optional String
   variable tClass as ObjcId
   variable tPropsCount as optional UInt32
   variable tClassDescription as optional ObjcId
   variable tListNSObj as ObjcId
   variable tListOpaquePtr as optional Pointer

   variable tList as List

   if pNSObj is not nothing then
      unsafe
         log ["Obj ID" , pNSObj]

         put objC_NSObjectClassName(pNSObj) into tNSStrObj

         put StringFromNSString(tNSStrObj) into tStr
         log ["Class Name" , tStr]

         put c_NSClassFromString(tNSStrObj) into tClass
          -- put ObjC_NSObjectGetClassNamed(tNSStrObj) into tClass
          -- LogNSObjectClassName(tClass)
         -- log ["Class Obj", tClass]

         put c_class_copyPropertyList(tClass,tPropsCount) into tListOpaquePtr

         log ["Props List Count and Pointer", tPropsCount, tListOpaquePtr]

         --put objC_NSObjectsGetClassDescriptionForClass(tClass) into tClassDescription
         -- log ["Class Description Obj", tClassDescription]
         -- objC_lookUpClass(pClass)
         -- LogNSObjectClassName(tClassDescription)
         -- put objC_NSObjectGetAttributeKeys(tClassDescription) into tListNSObj
         -- attributeKeys
         -- Get the list of methodss
         -- objc_sendMessage(tClass, "methods")
         -- put ListFromNSArray(tListNSObj) into tList
         -- log tList
        -- GetNSObjectAttributeKeys(pNSObj)

         put objC_NSObjectGetDescription(pNSObj) into tNSStrObj
         put StringFromNSString(tNSStrObj) into tStr
         log ["Description" , tStr]

         put objC_NSObjectGetSuperClass(pNSObj) into tNSObjB
         put objC_NSObjectClassName(tNSObjB) into tNSStrObj
         put StringFromNSString(tNSStrObj) into tStr
         log ["SuperClass" , tStr]

      end unsafe
   else
      log "No Object"
   end if
end handler

public handler GetNSObjectClassName(in tNSObj as optional ObjcId) returns optional String
   variable tOSStatus as CSInt
   variable tNSStrObj as optional ObjcId
   variable tStr as optional String
   if tNSObj is not nothing then
   unsafe
      put objC_NSObjectClassName(tNSObj) into tNSStrObj
      put StringFromNSString(tNSStrObj) into tStr
      return tStr
   end unsafe
   else
      return nothing
   end if
end handler

public foreign type CGSize binds to "MCAggregateTypeInfo:qq"
public foreign type NSRect binds to "MCAggregateTypeInfo:qqqq"

public variable sMyWindow as optional ObjcId
public variable sMyView as optional ObjcId
public variable sMyWindowController as optional ObjcId
public variable sAUViewController as optional ObjcId

private foreign handler ObjC_NSApplicationSharedApplication() returns ObjcId binds to "objc:NSApplication.+sharedApplication"
private foreign handler ObjC_NSBundleWithURL(in pNSURL as ObjcId) returns ObjcId binds to "objc:NSBundle.+bundleWithURL:"
private foreign handler ObjC_NSBundleGetClassNamed(in pNSbundle as ObjcId,in pClassNameNSString as ObjcId) returns ObjcId binds to "objc:NSBundle.-classNamed:"
private foreign handler ObjC_NSAppWindowWithWindowNumber(in pObj as ObjcId, in pWindowNumber as CLong) returns ObjcId binds to "objc:NSApplication.-windowWithWindowNumber:"

private foreign handler ObjC_NSWindowControllerAlloc() returns ObjcRetainedId binds to "objc:NSWindowController.+alloc"
private foreign handler ObjC_NSWindowControllerDealloc(in pObj as ObjcId) returns nothing binds to "objc:NSWindowController.-dealloc"
private foreign handler ObjC_NSWindowControllerInitWithWindow(in pObj as ObjcRetainedId,in pNSWindow as ObjcRetainedId) returns ObjcId binds to "objc:NSWindowController.-initWithWindow:"
private foreign handler ObjC_NSWindowControllerShowWindow(in pObj as ObjcId,in pNSWindow as ObjcId) returns nothing binds to "objc:NSWindowController.-showWindow:"
private foreign handler ObjC_NSWindowControllerClose(in pNSWindowController as ObjcId) returns nothing binds to "objc:NSWindowController.-close"

private foreign handler ObjC_NSWindowSetContentViewController(in pObj as ObjcId, in pViewController as ObjcId) returns nothing binds to "objc:NSWindow.-setContentViewController:"
private foreign handler ObjC_NSWindowGetContentViewController(in pObj as ObjcId) returns ObjcId binds to "objc:NSWindow.-contentViewController"

private foreign handler ObjC_NSWindowSetTitle(in pObj as ObjcId, in pTitleNSStr as ObjcId) returns nothing binds to "objc:NSWindow.-setTitle:"
private foreign handler ObjC_NSWindowGetStyleMask(in pObj as ObjcId) returns CLong binds to "objc:NSWindow.-styleMask"
private foreign handler ObjC_NSWindowSetStyleMask(in pObj as ObjcId, in pOptions as CInt) returns nothing binds to "objc:NSWindow.-setStyleMask:"
private foreign handler ObjC_NSWindowSetLevel(in pObj as ObjcId, in pLevel as CInt) returns nothing binds to "objc:NSWindow.-setLevel:"
private foreign handler ObjC_NSWindowGetLevel(in pObj as ObjcId) returns CInt binds to "objc:NSWindow.-level"
private foreign handler ObjC_NSWindowGetReleasedWhenClosed(in pObj as ObjcId) returns CBool binds to "objc:NSWindow.isReleasedWhenClosed"

private foreign handler ObjC_NSWindowAlloc() returns ObjcRetainedId binds to "objc:NSWindow.+alloc"
private foreign handler ObjC_NSWindowInitWithRectStyleBackingDefer(in pObj as ObjcRetainedId, in pRect as NSRect, in pStyleMask as CLong, in pBackingStoreType as CLong, in pDefer as CBool) \
                                                       returns ObjcId binds to "objc:NSWindow.-initWithContentRect:styleMask:backing:defer:"
private foreign handler ObjC_NSViewControllerAlloc() returns ObjcRetainedId binds to "objc:NSViewController.+alloc"
private foreign handler ObjC_NSViewControllerDealloc(in pObj as ObjcId) returns nothing binds to "objc:NSViewController.-dealloc"

private foreign handler ObjC_NSWindowCreateWithViewController(in pNSViewController as ObjcId) returns ObjcRetainedId binds to "objc:NSWindow.+windowWithContentViewController:"
private foreign handler ObjC_NSWindowDealloc(in pNSViewController as ObjcId) returns nothing binds to "objc:NSWindow.-dealloc"

private variable sViewControllerCompletionHandler as optional ObjcBlockPointer
private foreign handler objC_AUAudioUnitRequestViewControllerWithCompletionHandler(in pAUAudioUnit as ObjcId,in pViewControllerCompletionHandler as optional ObjcBlockPointer) returns ObjcRetainedId binds to "objc:AUAudioUnit.requestViewControllerWithCompletionHandler:" -- macOS 10.11+ only

public handler OpenAUWindow()
   variable tNSObj as optional ObjcId
   variable tBoolean as optional Boolean

   unsafe
      if sAUViewController is not nothing then
         if sMyWindow is nothing then
            put ObjC_NSWindowCreateWithViewController(sAUViewController) into sMyWindow
            ObjC_NSWindowSetTitle(sMyWindow,StringToNSString("Audio Unit"))
            put ObjC_NSWindowGetReleasedWhenClosed(sMyWindow) into tBoolean
            log tBoolean
         else
            ObjC_NSWindowSetContentViewController(sMyWindow,sAUViewController)
         end if
         if sMyWindowController is nothing then
            put ObjC_NSWindowControllerAlloc() into sMyWindowController
             put ObjC_NSWindowControllerInitWithWindow(sMyWindowController,sMyWindow) into sMyWindowController
          end if
         ObjC_NSWindowControllerShowWindow(sMyWindowController,sMyWindow)
      end if
   end unsafe
end handler

public handler CloseAUWindow()
   unsafe
      if sMyWindowController is not nothing then
         objC_NSWindowControllerClose(sMyWindowController)
         -- objC_NSObjectRelease(sMyWindowController)
         -- put nothing into sAUViewController
         -- put nothing into sViewControllerCompletionHandler
      end if
   end unsafe
end handler

public handler ViewControllerCompletionHandler( in pContext as optional ObjcBlockPointer,in pNSViewController as optional ObjcId )
   variable tStr as optional String
   unsafe
      if pNSViewController is not nothing then
         put GetNSObjectClassName(pNSViewController) into tStr
         if tStr is "AUViewController" then
            put pNSViewController into sAUViewController
            OpenAUWindow()
         else
            -- a better way would be to pre-check that the AudioUnit actually has a custom UI view to display!
            put nothing into sAUViewController
            log tStr
         end if
      end if
   end unsafe
   put nothing into sViewControllerCompletionHandler
end handler

public handler AVAudioUnitMIDIInstrumentOpenUIWindow( ) returns nothing
   variable tAudioComponentDescription as AudioComponentDescription
   variable tAUAudioUnit as ObjcObject
   variable tAudioUnit as optional Pointer
   variable tAudioUnitCocoaViewInfo as AudioUnitCocoaViewInfo -- a struct with two Pointers
   variable tAudioUnitsNNSBundleNSURL as ObjcId
   variable tAudioUnitsNSBundle as ObjcId
   variable tAudioUnitUIClassNSStr as ObjcId
   variable tAudioUnitProperty as UInt32
   variable tAudioUnitScope as UInt32
   variable tAudioUnitElement as UInt32
   --variable tNSView as ObjcId
   variable tOSStatus as CSInt
   variable tNSStrObj as optional ObjcId
   variable tStr as optional String
   variable tNSObj as optional ObjcId
   variable tNSObject as optional ObjcObject
   variable tDataPtr as optional Pointer
   variable tData as optional any
   variable rDataSize as optional UInt32
   variable tNumber as optional Number -- Integer
   variable tNSRect as NSRect
   variable tStyleMask as CLong
   variable tCGSize as CGSize
   unsafe
      put objC_AVAudioUnitGetAudioUnit(sAVAudioUnitMIDIInstrument) into tAudioUnit
      -- put objC_AVAudioUnitComponentGetComponent(tAudioUnit) into tAudioComponent
      -- if objC_AVAudioUnitComponentHasCustomView( sAVAudioUnitMIDIInstrument ) then
      --    log "Has Custom UI"
      -- end if

      put 16 into rDataSize -- 2X 64bit Pointer size
      put c_AudioUnitGetPropertyAudioUnitCocoaViewInfo(tAudioUnit,31,0,0,tAudioUnitCocoaViewInfo,rDataSize) into tOSStatus
      CheckAudioUnitError(tOSStatus)
      if tOSStatus = kAudioUnitErr_InvalidProperty then
         log "No Custom UI for this AudioUnit"
      end if
      -- log [tAudioUnitCocoaViewInfo,rDataSize] -- returned rDataSize should be 64bit Pointer size
      if tOSStatus = 0 then

         put element 1 of tAudioUnitCocoaViewInfo into tDataPtr
         put PointerToObjcObject(tDataPtr) into tAudioUnitsNNSBundleNSURL
         LogNSObjectClassName(tAudioUnitsNNSBundleNSURL)
         -- put objC_NSURLGetAbsoluteString(tNSObj) into tNSStrObj
         put ObjC_NSBundleWithURL(tAudioUnitsNNSBundleNSURL) into tAudioUnitsNSBundle
         put objC_NSURLGetPath(tAudioUnitsNNSBundleNSURL) into tNSStrObj
         put StringFromNSString(tNSStrObj) into tStr
         log tStr
         LogNSObjectClassName(tAudioUnitsNSBundle)
         ---
         put element 2 of tAudioUnitCocoaViewInfo into tDataPtr
         put PointerToObjcObject(tDataPtr) into tAudioUnitUIClassNSStr
         LogNSObjectClassName(tAudioUnitUIClassNSStr)
         put StringFromNSString(tAudioUnitUIClassNSStr) into tStr
         log ["tAudioUnitUIClass",tStr]

         if sViewControllerCompletionHandler is nothing then
            if CreateObjcBlockPointerFromHandler( ViewControllerCompletionHandler , sViewControllerCompletionHandler) then
               -- put objC_AUAudioUnitRequestViewControllerWithCompletionHandler(tAUAudioUnit,sViewControllerCompletionHandler) into tNSView
            end if
         end if
         put objC_AVAudioUnitGetAUAudioUnit(sAVAudioUnitMIDIInstrument) into tAUAudioUnit

         --  CloseAUWindow()
            objC_AUAudioUnitRequestViewControllerWithCompletionHandler(tAUAudioUnit,sViewControllerCompletionHandler)
         --else
         --   put nothing into sAUViewController
         --   objC_AUAudioUnitRequestViewControllerWithCompletionHandler(tAUAudioUnit,sViewControllerCompletionHandler)
         --end if
      end if
   end unsafe
end handler

public handler AVAudioUnitMIDIInstrumentGetFactoryPresets() returns String
   variable tAUAudioUnit as ObjcObject
   variable tAUAudioUnitPreset as ObjcObject
   variable tAUAudioUnitFactoryPresetsList as List
   variable tAudioUnit as Pointer

   variable tNSError as optional ObjcObject
   variable tNSErrorDescriptionRef as ObjcId
   variable tErrorDescription as optional String
   variable tOSStatus as CSInt

   variable rReturnString as String
   variable tNSStrObj as optional ObjcId
   variable tStr as optional String
   variable tNumber as optional Number
   variable tNSObj as optional ObjcId
   variable tNSObject as optional ObjcObject
   put "" into rReturnString
   unsafe
      -- put objC_AVAudioUnitGetAUAudioUnitFactoryPresets(tAUAudioUnit) into tNSObj
      put objC_AVAudioUnitGetAUAudioUnit(sAVAudioUnitMIDIInstrument) into tAUAudioUnit
      put objC_AUAudioUnitGetValForKey(tAUAudioUnit,StringToNSString("factoryPresets")) into tNSObject
      if tNSObject is not nothing then
         put ListFromNSArray(tNSObject) into tAUAudioUnitFactoryPresetsList
         repeat for each element tAUAudioUnitPreset in tAUAudioUnitFactoryPresetsList
            --put objC_NSObjectClassName(tAUAudioUnitPreset) into tNSObj
            -- put StringFromNSString(tNSObj) into tStr
            -- log tStr
            put objC_AUAudioUnitPresetGetValForKey(tAUAudioUnitPreset,StringToNSString("name")) into tNSStrObj
            -- put objC_AUAudioUnitPresetName(tAUAudioUnit) into tNSStrObj

            if tNSStrObj is not nothing then
               put StringFromNSString(tNSStrObj) into tStr
            else
               put "" into tStr
            end if
            put objC_AUAudioUnitPresetGetValForKey(tAUAudioUnitPreset,StringToNSString("number")) into tNSObj
            -- put objC_AUAudioUnitPresetNumber(tAUAudioUnit) into tNSObj
            if tNSObj is not nothing then
               put NumberFromNSNumber(tNSObj) into tNumber
            else
               put 0 into tNumber
            end if
            put tNumber formatted as string &"-"& tStr & "\n" after rReturnString
         end repeat
      end if
      put objC_AUAudioUnitGetValForKey(tAUAudioUnit,StringToNSString("userPresets")) into tNSObject
      if tNSObject is not nothing then
         put ListFromNSArray(tNSObject) into tAUAudioUnitFactoryPresetsList
         repeat for each element tAUAudioUnitPreset in tAUAudioUnitFactoryPresetsList
            --put objC_NSObjectClassName(tAUAudioUnitPreset) into tNSObj
            -- put StringFromNSString(tNSObj) into tStr
            -- log tStr
            put objC_AUAudioUnitPresetGetValForKey(tAUAudioUnitPreset,StringToNSString("name")) into tNSStrObj
            -- put objC_AUAudioUnitPresetName(tAUAudioUnit) into tNSStrObj

            if tNSStrObj is not nothing then
               put StringFromNSString(tNSStrObj) into tStr
            else
               put "" into tStr
            end if
            put objC_AUAudioUnitPresetGetValForKey(tAUAudioUnitPreset,StringToNSString("number")) into tNSObj
            -- put objC_AUAudioUnitPresetNumber(tAUAudioUnit) into tNSObj
            if tNSObj is not nothing then
               put NumberFromNSNumber(tNSObj) into tNumber
            else
               put 0 into tNumber
            end if
            put tNumber formatted as string &"-"& tStr & "\n" after rReturnString
         end repeat
      end if

      -- put c_AudioUnitGetPropertyFactoryPresets(tAudioUnit,tAudioUnitProperty,tAudioUnitScope,tAudioUnitElement,tDataPtr,rDataSize) into tOSStatus
      -- if tDataPtr is not nothing then
      --   put PointerToObjcObject(tDataPtr) into tNSObject
      --   log tNSObject
      --   if tNSObject is not nothing then
      --      put ArrayFromNSDictionary(tNSObject) into tAUAudioUnitFactoryPresetsArray
      --      -- put ListFromNSArray(tNSObject) into tAUAudioUnitFactoryPresetsList
      --      log tAUAudioUnitFactoryPresetsArray
      --   end if
      -- end if
      return rReturnString
   end unsafe
end handler


public handler AVAudioUnitMIDIInstrumentSetPresetNumber(in pPresetNum as Integer) returns String
   variable tAUAudioUnit as ObjcId -- ObjcObject
   variable tAUAudioUnitPreset as ObjcId --ObjcObject
   variable tAUAudioUnitFactoryPresetsList as List
   variable tAudioUnit as Pointer

   variable tNSError as optional ObjcObject
   variable tNSErrorDescriptionRef as ObjcId
   variable tErrorDescription as optional String
   variable tOSStatus as CSInt

   variable rReturnString as String
   variable tNSStrObj as optional ObjcId
   variable tStr as optional String
   variable tNumber as optional Number
   variable tNSObj as optional ObjcId
   variable tNSObject as optional ObjcObject
   put "" into rReturnString
   unsafe
      -- put objC_AVAudioUnitGetAUAudioUnitFactoryPresets(tAUAudioUnit) into tNSObj
      put objC_AVAudioUnitGetAUAudioUnit(sAVAudioUnitMIDIInstrument) into tAUAudioUnit
      put objC_AUAudioUnitGetValForKey(tAUAudioUnit,StringToNSString("factoryPresets")) into tNSObject
      if tNSObject is not nothing then
         put ListFromNSArray(tNSObject) into tAUAudioUnitFactoryPresetsList
         put element pPresetNum of tAUAudioUnitFactoryPresetsList into tAUAudioUnitPreset
         objC_AUAudioUnitSetValForKey(tAUAudioUnit,tAUAudioUnitPreset,StringToNSString("currentPreset"))
         -- objC_AVAudioUnitCurrentPreset(tAUAudioUnit,tAUAudioUnitPreset,StringToNSString("currentPreset"))
         put objC_AUAudioUnitPresetGetValForKey(tAUAudioUnitPreset,StringToNSString("name")) into tNSStrObj
         if tNSStrObj is not nothing then
            put StringFromNSString(tNSStrObj) into tStr
         else
            put "" into tStr
         end if
         put objC_AUAudioUnitPresetGetValForKey(tAUAudioUnitPreset,StringToNSString("number")) into tNSObj
         if tNSObj is not nothing then
            put NumberFromNSNumber(tNSObj) into tNumber
         else
            put 0 into tNumber
         end if
         put tNumber formatted as string &"-"& tStr & "\n" after rReturnString
      end if
   end unsafe
   return rReturnString
end handler

/**
Sets the main volume or loudness level of the AudioUnit MIDIInstrument , turn it up to 11!

Type: command

Syntax: AVAudioUnitMIDIInstrumentSetVolume <pVolume>

Example:
AVAudioUnitMIDIInstrumentGetVolume 11.0 -- Turn it Up to 11 !!!
AVAudioUnitMIDIInstrumentGetVolume 0 -- Silent
AVAudioUnitMIDIInstrumentGetVolume -5.0

Parameters:
pVolume: The amount of volume for sound output
Description:
Sets the main volume or loudness level of the AudioUnit MIDIInstrument , turn it up to 11!
*/
public handler AVAudioUnitMIDIInstrumentSetVolume(in pVolume as optional Integer) returns nothing
   if pVolume is nothing then
      put 1.0 into pVolume
   end if
   unsafe
    objC_AVAudioUnitMIDIInstrumentSetValForKey(sAVAudioUnitMIDIInstrument,NumberToNSNumber(pVolume),StringToNSString("volume"))
   end unsafe
end handler

/**
Gets the current main volume or loudness level of the AudioUnit MIDIInstrument

Type: function

Example:
AVAudioUnitMIDIInstrumentGetVolume()

Returns: number for volume that AudioUnit sound output is currently set for.

Description:
Gets the current main volume or loudness level of the AudioUnit MIDIInstrument
*/
public handler AVAudioUnitMIDIInstrumentGetVolume() returns Number
   variable rVolume as ObjcId
   unsafe
    put objC_AVAudioUnitMIDIInstrumentGetValForKey(sAVAudioUnitMIDIInstrument,StringToNSString("volume")) into rVolume
    return NumberFromNSNumber(rVolume)
   end unsafe
end handler

/**
Sets The blend level of the Reverb Effect of the AudioUnit MIDIInstrument

Type: command

Syntax: AVAudioUnitMIDIInstrumentSetReverbBlend <pReverbBlend>

Example:
AVAudioUnitMIDIInstrumentSetReverbBlend 0 -- Dry / No reverb
AVAudioUnitMIDIInstrumentGetVolume 1.0 full blend of Reverb effect

Parameters:
pReverbBlend: The amount to blend reverb effect
Description:
Sets The blend level of the Reverb Effect of the AudioUnit MIDIInstrument, in the range of 0.0 to 1.0
*/
public handler AVAudioUnitMIDIInstrumentSetReverbBlend(in pReverbBlend as optional Integer) returns nothing
   if pReverbBlend is nothing then
      put 1.0 into pReverbBlend
   end if
   unsafe
    objC_AVAudioUnitMIDIInstrumentSetValForKey(sAVAudioUnitMIDIInstrument,NumberToNSNumber(pReverbBlend),StringToNSString("reverbBlend"))
   end unsafe
end handler

/**
Gets The blend level of the Reverb Effect of the AudioUnit MIDIInstrument

Type: function

Example:
AVAudioUnitMIDIInstrumentGetVolume()

Returns: The blend level of the Reverb Effect

Description:
Gets The blend level of the Reverb Effect of the AudioUnit MIDIInstrument
*/
public handler AVAudioUnitMIDIInstrumentReverBlend() returns Number
   variable rReverbBlend as ObjcId
   unsafe
    put objC_AVAudioUnitMIDIInstrumentGetValForKey(sAVAudioUnitMIDIInstrument,StringToNSString("reverbBlend")) into rReverbBlend
    return NumberFromNSNumber(rReverbBlend)
   end unsafe
end handler

/**
Sets the Stereo pan values in the range of -1.0 (left) to 1.0 (right)

Type: command

Syntax: AVAudioUnitMIDIInstrumentPan <pBalance>

Example:
AVAudioUnitMIDIInstrumentPan -1.0 -- all sounds output in left speaker
AVAudioUnitMIDIInstrumentPan 0 -- all sounds centered
AVAudioUnitMIDIInstrumentPan 1.0 -- all sounds output in right speaker

Parameters:
pBalance: The amount to shift sound output to the left or the right

Description:
Sets the amount to shift sound output to the left or right in the range of -1.0 (left) to 1.0 (right)
*/
public handler AVAudioUnitMIDIInstrumentPan(in pBalance as optional Number) returns nothing
   --private foreign handler objC_AVAudioUnitSamplerStereoPan(in pAVAUSampler as ObjcId, in pPan as NaturalFloat) returns nothing binds to "objc:AVAudioUnitSampler.stereoPan"
   -- stereoPan -- float -- default value is 0.0. The range of valid values is -1.0 to 1.0.
   expect that (pBalance >= -1.0 and pBalance <= 1.0 ) because "Stereo pan values must be in the range of -1.0 to 1.0"
   if pBalance is nothing then
      put 0.0 into pBalance
   end if
   unsafe
   objC_AVAudioUnitMIDIInstrumentSetValForKey(sAVAudioUnitMIDIInstrument,NumberToNSNumber(pBalance),StringToNSString("pan"))
   end unsafe
end handler

/**
Immediately sends a MIDI Note On message with the given pitch and velocity on the given channel.

Type: command

Syntax: AVAudioUnitMIDIInstrumentNoteOn <MIDINoteNumber>,pMIDIVelocityNumber,<pMIDIChannelNumber>

Example:
AVAudioUnitMIDIInstrumentNoteOn 60,127,1 -- 60=Middle C, 127=Full velocity, 1=MIDI channel 1

Parameters:
pMIDINoteNum: The number of the pitch to turn on, 0 to 127, 60 = Middle C
pMIDIVeloNum: The velocity to play the given pitch at, 0 to 127
pMIDIChanNum: The MIDI Channel to play the note on, 1 to 16

Description: Immediately sends a MIDI Note On message with the given pitch and velocity on the given channel.
*/
public handler AVAudioUnitMIDIInstrumentNoteOn(in pNoteNum as Integer, in pNoteVelo as Integer, in pNoteChan as Number) returns nothing
   expect that (pNoteNum >= 0 and pNoteNum <= 127 ) because "MIDI pitch values must be in the range of 0 to 127"
   expect that (pNoteVelo >= 0 and pNoteVelo <= 127 ) because "MIDI veloctiy values must be in the range of 0 to 127"
   expect that (pNoteChan >= 1 and pNoteChan <= 16 ) because "MIDI channel values must be in the range of 1 to 16"
   subtract 1 from pNoteChan -- actual channel range is 0 to 15
   unsafe
       objC_AVAudioUnitMIDIInstrumentNoteOn(sAVAudioUnitMIDIInstrument,pNoteNum,pNoteVelo,pNoteChan)
   end unsafe
end handler

/**
Name: AVAudioUnitMIDIInstrumentNoteOff

Type: command

Syntax: AVAudioUnitMIDIInstrumentNoteOff <MIDINoteNumber>,<MIDIChannelNumber>

Summary:
Immediately sends a MIDI Note Off message with the given pitch and velocity on the given channel.

Example:
AVAudioUnitMIDIInstrumentNoteOff 60,1 -- Turns off Middle C on MIDI channel 1

Parameters:
pMIDINoteNum: The number of the pitch to turn off, 0 to 127, 60 = Middle C
pMIDIChanNum: The MIDI Channel to send the message to, 0 to 15, 0 = Channel 1

Description:
Immediately sends a MIDI Note Off message with the given pitch on the given channel.
*/
public handler AVAudioUnitMIDIInstrumentNoteOff(in pNoteNum as Integer, in pNoteChan as Number) returns nothing
   expect that (pNoteNum >= 0 and pNoteNum <= 127 ) because "MIDI pitch values must be in the range of 0 to 127"
   expect that (pNoteChan >= 1 and pNoteChan <= 16 ) because "MIDI channel values must be in the range of 1 to 16"
   subtract 1 from pNoteChan -- actual channel range is 0 to 15
   unsafe
       objC_AVAudioUnitMIDIInstrumentNoteOff(sAVAudioUnitMIDIInstrument,pNoteNum,pNoteChan)
   end unsafe
end handler

/**
The send pitchbend with fine range from 0 to 16384, 8192 is centered (no bend)

Type: command

Syntax: AVAudioUnitMIDIInstrumentPitchbend <pPitchBendCoarseNFine>,<pMIDIChanNum>

Example:
AVAudioUnitMIDIInstrumentPitchbend 0,1 -- Pitchbend Maximum Down, channel 1
AVAudioUnitMIDIInstrumentPitchbend 16384,1 -- Pitchbend Maximum Up, channel 1
AVAudioUnitMIDIInstrumentPitchbend 8192,1 -- Centered / No Bend, channel 1

Parameters:
pPitchBendCoarseNFine: The number of the pitch bend 'position'
pMIDIChanNum: MIDI Channel to send the bend value on, 1 to 16

Description:
The send pitchbend with fine range from 0 to 16384, 8192 is centered (no bend)
*/
public handler AVAudioUnitMIDIInstrumentPitchbend(in pBend as Uint16, in pNoteChan as Number) returns nothing
   expect that (pBend >= 0 and pBend <= 16384 ) because "MIDI controller selection must be in the range of 0 to 16384, 8192 is no bend"
   expect that (pNoteChan >= 1 and pNoteChan <= 16 ) because "MIDI channel values must be in the range of 1 to 16"
   subtract 1 from pNoteChan -- actual channel range is 0 to 15
   unsafe
      objC_AVAudioUnitMIDIInstrumentPitchbend(sAVAudioUnitMIDIInstrument,pBend,pNoteChan)
   end unsafe
end handler

/**
Name: AVAudioUnitMIDIInstrumentController

Type: command

Syntax: AVAudioUnitMIDIInstrumentController <pController>, <pControllerVal>, <pMIDIChanNum>

Summary:
The send a controller with a single data byte value to on a given channel

Example:
AVAudioUnitMIDIInstrumentController 7,127,1 -- 7 = Volume Controller, Data Byte 1, channel 1

Parameters:
pController: The number of the MIDI Controller to set values for
pControllerVal: The value byte one
pMIDIChanNum: MIDI Channel to send the controller value on, 1 to 16

Description:
The send a controller with a single data byte value to on a given channel
*/
public handler AVAudioUnitMIDIInstrumentController(pController as UInt8, in pValue as UInt8, in pNoteChan as UInt8) returns nothing
   expect that (pController >= 0 and pController <= 127 ) because "MIDI controllers values must be in the range of 0 to 127"
   expect that (pValue >= 0 and pValue <= 127 ) because "MIDI controllers parameter values must be in the range of 0 to 127"
   expect that (pNoteChan >= 1 and pNoteChan <= 16 ) because "MIDI channel values must be in the range of 1 to 16"
   subtract 1 from pNoteChan -- actual channel range is 0 to 15
   unsafe
      objC_AVAudioUnitMIDIInstrumentController(sAVAudioUnitMIDIInstrument,pController,pValue,pNoteChan)
   end unsafe
end handler

end library
